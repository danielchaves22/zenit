datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

enum Role {
  ADMIN
  SUPERUSER
  USER
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String
  name                String
  role                Role                  @default(USER)
  companies           UserCompany[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  financialTransactions FinancialTransaction[]
  recurringTransactions RecurringTransaction[]
  financialAccountAccess UserFinancialAccountAccess[]
  grantedPermissions     UserFinancialAccountAccess[] @relation("GrantedPermissions")
}

model Company {
  id                  Int                   @id @default(autoincrement())
  name                String
  address             String?
  code                Int                   @unique
  users               UserCompany[]
  groups              CompanyGroup[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  financialAccounts   FinancialAccount[]
  financialCategories FinancialCategory[]
  financialTransactions FinancialTransaction[]
  financialTags       FinancialTag[]
  recurringTransactions RecurringTransaction[]
  userFinancialAccountAccess UserFinancialAccountAccess[]
}

model CompanyGroup {
  id        Int       @id @default(autoincrement())
  name      String
  companies Company[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserCompany {
  id        Int     @id @default(autoincrement())
  userId    Int
  companyId Int
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

model FinancialAccount {
  id                Int                 @id @default(autoincrement())
  name              String
  type              AccountType
  balance           Decimal            @db.Decimal(15, 2) @default(0)
  accountNumber     String?
  bankName          String?
  isActive          Boolean            @default(true)
  isDefault         Boolean            @default(false)
  allowNegativeBalance Boolean         @default(false)
  companyId         Int
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recurringOutgoing RecurringTransaction[] @relation("RecurringFromAccount")
  recurringIncoming RecurringTransaction[] @relation("RecurringToAccount")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relações
  outgoingTransactions FinancialTransaction[] @relation("FromAccount")
  incomingTransactions FinancialTransaction[] @relation("ToAccount")
  userAccess            UserFinancialAccountAccess[]

  @@unique([name, companyId])
  @@unique([companyId, isDefault], name: "unique_default_account_per_company") // ✅ CONSTRAINT
  @@index([companyId])
  @@index([companyId, isDefault]) // ✅ ÍNDICE OTIMIZADO
}

model FinancialCategory {
  id              Int                  @id @default(autoincrement())
  name            String
  type            TransactionType      @default(EXPENSE)
  color           String               @default("#6366F1")
  isDefault       Boolean              @default(false)  // ✅ NOVO CAMPO
  parentId        Int?
  parent          FinancialCategory?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        FinancialCategory[]  @relation("CategoryHierarchy")
  companyId       Int
  company         Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  accountingCode  String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relações
  transactions    FinancialTransaction[]
  recurringTransactions RecurringTransaction[]

  @@unique([name, parentId, companyId])
  @@unique([companyId, type, isDefault], name: "unique_default_category_per_company_type") // ✅ CONSTRAINT
  @@index([companyId])
  @@index([parentId])
  @@index([companyId, type, isDefault]) // ✅ ÍNDICE OTIMIZADO
}

model FinancialTransaction {
  id              Int                  @id @default(autoincrement())
  description     String
  amount          Decimal              @db.Decimal(15, 2)
  
  // ✅ DATAS MÚLTIPLAS
  date            DateTime             // Data principal (competência/referência)
  dueDate         DateTime?            // Data de vencimento (para PENDING)
  effectiveDate   DateTime?            // Data de efetivação (para COMPLETED)
  
  // ✅ VALORES MÚLTIPLOS (preparação para futuro)
  originalAmount  Decimal?             @db.Decimal(15, 2) // Valor original
  paidAmount      Decimal?             @db.Decimal(15, 2) // Valor pago (com juros/desconto)
  
  type            TransactionType
  status          TransactionStatus    @default(COMPLETED) // ✅ MUDANÇA: padrão COMPLETED
  notes           String?
  fromAccountId   Int?
  fromAccount     FinancialAccount?    @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccountId     Int?
  toAccount       FinancialAccount?    @relation("ToAccount", fields: [toAccountId], references: [id])
  categoryId      Int?
  category        FinancialCategory?   @relation(fields: [categoryId], references: [id])
  companyId       Int
  company         Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy       Int
  createdByUser   User                 @relation(fields: [createdBy], references: [id])
  tags            FinancialTag[]
  scheduledDate           DateTime?
  recurringTransactionId  Int?
  recurringTransaction    RecurringTransaction? @relation(fields: [recurringTransactionId], references: [id])
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  // ✅ ÍNDICES EXISTENTES
  @@index([companyId])
  @@index([fromAccountId])
  @@index([toAccountId])
  @@index([categoryId])
  @@index([date])
  
  // ✅ NOVOS ÍNDICES PARA PERFORMANCE
  @@index([dueDate, status])                              // Relatórios de inadimplência
  @@index([effectiveDate])                               // Conciliação bancária
  @@index([companyId, effectiveDate, status])           // Relatórios financeiros
}

model RecurringTransaction {
  id              Int                  @id @default(autoincrement())
  description     String
  amount          Decimal              @db.Decimal(15, 2)
  type            TransactionType
  frequency       RecurringFrequency
  dayOfMonth      Int?                 // Para MONTHLY: dia do mês (1-31)
  dayOfWeek       Int?                 // Para WEEKLY: dia da semana (0-6)
  startDate       DateTime
  endDate         DateTime?            // null = sem fim
  nextDueDate     DateTime
  isActive        Boolean              @default(true)
  notes           String?
  fromAccountId   Int?
  fromAccount     FinancialAccount?    @relation("RecurringFromAccount", fields: [fromAccountId], references: [id])
  toAccountId     Int?
  toAccount       FinancialAccount?    @relation("RecurringToAccount", fields: [toAccountId], references: [id])
  categoryId      Int?
  category        FinancialCategory?   @relation(fields: [categoryId], references: [id])
  companyId       Int
  company         Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy       Int
  createdByUser   User                 @relation(fields: [createdBy], references: [id]) // ✅ CORRIGIDO
  transactions    FinancialTransaction[] // Transações geradas
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([companyId])
  @@index([type])
  @@index([nextDueDate])
  @@index([isActive])
}

model FinancialTag {
  id              Int                  @id @default(autoincrement())
  name            String
  companyId       Int
  company         Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions    FinancialTransaction[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@unique([name, companyId])
  @@index([companyId])
}

model UserFinancialAccountAccess {
  id                   Int              @id @default(autoincrement())
  userId               Int
  financialAccountId   Int
  companyId            Int              // Garantir que só pode dar acesso a contas da mesma empresa
  grantedBy            Int              // Quem concedeu a permissão
  grantedAt            DateTime         @default(now())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  
  // Relações
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  financialAccount     FinancialAccount @relation(fields: [financialAccountId], references: [id], onDelete: Cascade)
  company              Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  grantedByUser        User             @relation("GrantedPermissions", fields: [grantedBy], references: [id])

  // Constraints
  @@unique([userId, financialAccountId], name: "unique_user_account_access")
  @@index([userId])
  @@index([financialAccountId])
  @@index([companyId])
  @@index([grantedBy])
}